{
  "entityType" : "TB_RESOURCE",
  "entity" : {
    "customerId" : null,
    "data" : "",
    "descriptor" : null,
    "etag" : "a6b143d5a1d1d998074c75184ca54060affdd5527b4c1dc6714bfbfd9abdb9d6",
    "externalId" : null,
    "fileName" : "5-1_1.xml",
    "id" : {
      "entityType" : "TB_RESOURCE",
      "id" : "7d4131e0-fe53-11ef-a031-6f2b1d5d37e4"
    },
    "link" : "/api/resource/lwm2m_model/tenant/5_1.1",
    "name" : "Firmware Update id=5 v1.1",
    "preview" : null,
    "public" : false,
    "publicLink" : null,
    "publicResourceKey" : null,
    "resourceKey" : "5_1.1",
    "resourceSubType" : null,
    "resourceType" : "LWM2M_MODEL",
    "title" : "Firmware Update id=5 v1.1"
  }
}