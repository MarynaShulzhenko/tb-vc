{
  "entityType" : "DASHBOARD",
  "entity" : {
    "title" : "Widget Action",
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "459e719f-01f8-415d-8b40-599990ccd846" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entityCount",
              "name" : null,
              "entityAliasId" : "150553f6-5f7e-3621-9b6a-21e617e7e682",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "count",
                "type" : "count",
                "label" : "count",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.9944493667322047,
                "aggregationType" : null,
                "units" : null,
                "decimals" : 0,
                "funcBody" : null,
                "usePostProcessing" : true,
                "postFuncBody" : "return parseInt(value);"
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1695983110560,
                  "endTimeMs" : 1696069510560
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : true,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "5px",
            "settings" : {
              "cardHtml" : "<div class='card'>\n    <!--<h5>Assets Monitored</h5>-->\n            \n            <div class='content' id='assets'>${#0:0}</div>\n            \n            </div>",
              "cardCss" : ".card {\n   width: 100%;\n   /*cursor: pointer;*/\n   height: 100%;\n   border: 0px solid #ccc;\n   padding: 10px;\n   box-sizing: border-box;\n   /*display: flex;*/\n   flex-direction: row;\n   text-align: center;\n   font-size: 1.3vw;\n}\n\n.content {\n    \n    font-weight:600;\n   padding: 1px;\n   display: flex;\n   align-items: center;\n   justify-content: center;\n   height: 100%;\n   padding-bottom: 15px;\n   box-sizing: border-box;\n   color: #666;\n}\n\n.content {\n   color: #0056b3 !important;\n    font-weight: 500 !important;\n    font-size: 1.8vw;\n}\n\n\n.content span {\n    display: block;\n    font-weight: 400;\n}\n\n.h1 {\n    \n    color: #999;\n    font-size: 14px;\n    font-weight: bold;\n    margin: 0;\n    padding-bottom: 5px;\n    line-height: 22px;\n    align-items: center;\n    justify-content: center;\n}\n\nh5 {\n    font-size: 1vw;\n    font-weight: 400;\n    line-height: 1;\n    letter-spacing: 0;\n    margin: 5px 0 0 0;\n}\n\n"
            },
            "title" : "Assets",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : {
              "elementClick" : [ ],
              "headerButton" : [ {
                "name" : "Assets",
                "icon" : "play_circle_filled",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "root_asset_list",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openRightLayout" : false,
                "dialogTitle" : "",
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : 80,
                "dialogHeight" : 90,
                "openInSeparateDialog" : true,
                "openInPopover" : false,
                "id" : "1a8388ce-1e4b-98be-da4f-861a829e7b84"
              } ]
            },
            "enableDataExport" : false,
            "widgetCss" : ".tb-widget-actions.tb-widget-actions-absolute.ng-star-inserted {\r\n    position: absolute !important;\r\n    top: -11px !important;\r\n    right: -6px !important;\r\n    z-index: 150 !important;\r\n}",
            "pageSize" : 1024,
            "decimals" : 0,
            "noDataDisplayMessage" : "",
            "borderRadius" : "15px",
            "displayTimewindow" : true,
            "titleFont" : {
              "size" : 1,
              "sizeUnit" : "vw",
              "family" : "Roboto",
              "weight" : "bolder",
              "style" : "normal"
            },
            "showTitleIcon" : false,
            "titleTooltip" : "",
            "titleIcon" : "domain",
            "iconColor" : "#0056B3",
            "iconSize" : "1.5vw"
          },
          "row" : 0,
          "col" : 0,
          "id" : "459e719f-01f8-415d-8b40-599990ccd846",
          "typeFullFqn" : "system.cards.html_value_card"
        },
        "44cf0a39-52d3-8c4a-e068-2071f857a17c" : {
          "typeFullFqn" : "system.cards.entities_table",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1734265775467,
                  "endTimeMs" : 1734352175467
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "entitiesTitle" : "Without Filter",
              "enableSearch" : false,
              "enableSelectColumnDisplay" : false,
              "enableStickyHeader" : false,
              "enableStickyAction" : false,
              "showCellActionsMenu" : false,
              "reserveSpaceForHiddenAction" : "true",
              "displayEntityName" : false,
              "entityNameColumnTitle" : "",
              "displayEntityLabel" : false,
              "entityLabelColumnTitle" : "",
              "displayEntityType" : false,
              "displayPagination" : false,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "name",
              "useRowStyleFunction" : false,
              "rowStyleFunction" : ""
            },
            "title" : "Without Filter",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "150553f6-5f7e-3621-9b6a-21e617e7e682",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "name",
                "type" : "entityField",
                "label" : "Name",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.3052626231606441
              }, {
                "name" : "type",
                "type" : "entityField",
                "label" : "Type",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.7127295998631691
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "displayTimewindow" : false,
            "configMode" : "advanced",
            "actions" : { },
            "showTitleIcon" : false,
            "titleIcon" : "list",
            "iconColor" : null,
            "titleFont" : null,
            "titleColor" : null,
            "enableDataExport" : true,
            "titleTooltip" : "",
            "widgetStyle" : { },
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "44cf0a39-52d3-8c4a-e068-2071f857a17c"
        },
        "8b9a22c4-3c6b-a667-6378-3d7d66f0d8ad" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entityCount",
              "name" : null,
              "entityAliasId" : "150553f6-5f7e-3621-9b6a-21e617e7e682",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "count",
                "type" : "count",
                "label" : "count",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.9944493667322047,
                "aggregationType" : null,
                "units" : null,
                "decimals" : 0,
                "funcBody" : null,
                "usePostProcessing" : true,
                "postFuncBody" : "return parseInt(value);"
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1695983110560,
                  "endTimeMs" : 1696069510560
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : true,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "5px",
            "settings" : {
              "cardHtml" : "<div class='card'>\n    <!--<h5>Assets Monitored</h5>-->\n            \n            <div class='content' id='assets'>${#0:0}</div>\n            \n            </div>",
              "cardCss" : ".card {\n   width: 100%;\n   /*cursor: pointer;*/\n   height: 100%;\n   border: 0px solid #ccc;\n   padding: 10px;\n   box-sizing: border-box;\n   /*display: flex;*/\n   flex-direction: row;\n   text-align: center;\n   font-size: 1.3vw;\n}\n\n.content {\n    \n    font-weight:600;\n   padding: 1px;\n   display: flex;\n   align-items: center;\n   justify-content: center;\n   height: 100%;\n   padding-bottom: 15px;\n   box-sizing: border-box;\n   color: #666;\n}\n\n.content {\n   color: #0056b3 !important;\n    font-weight: 500 !important;\n    font-size: 1.8vw;\n}\n\n\n.content span {\n    display: block;\n    font-weight: 400;\n}\n\n.h1 {\n    \n    color: #999;\n    font-size: 14px;\n    font-weight: bold;\n    margin: 0;\n    padding-bottom: 5px;\n    line-height: 22px;\n    align-items: center;\n    justify-content: center;\n}\n\nh5 {\n    font-size: 1vw;\n    font-weight: 400;\n    line-height: 1;\n    letter-spacing: 0;\n    margin: 5px 0 0 0;\n}\n\n"
            },
            "title" : "Assets",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : {
              "elementClick" : [ ],
              "headerButton" : [ {
                "name" : "Assets",
                "icon" : "play_arrow",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "root_asset_list",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openRightLayout" : false,
                "dialogTitle" : "",
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : 80,
                "dialogHeight" : 90,
                "openInSeparateDialog" : true,
                "openInPopover" : false,
                "id" : "1a8388ce-1e4b-98be-da4f-861a829e7b84"
              } ]
            },
            "enableDataExport" : false,
            "widgetCss" : ".tb-widget-actions.tb-widget-actions-absolute.ng-star-inserted {\r\n    position: absolute !important;\r\n    top: -11px !important;\r\n    right: -6px !important;\r\n    z-index: 150 !important;\r\n}",
            "pageSize" : 1024,
            "decimals" : 0,
            "noDataDisplayMessage" : "",
            "borderRadius" : "15px",
            "displayTimewindow" : true,
            "titleFont" : {
              "size" : 1,
              "sizeUnit" : "vw",
              "family" : "Roboto",
              "weight" : "bolder",
              "style" : "normal"
            },
            "showTitleIcon" : false,
            "titleTooltip" : "",
            "titleIcon" : "domain",
            "iconColor" : "#0056B3",
            "iconSize" : "1.5vw"
          },
          "row" : 0,
          "col" : 0,
          "id" : "8b9a22c4-3c6b-a667-6378-3d7d66f0d8ad",
          "typeFullFqn" : "system.cards.html_value_card"
        },
        "00673039-8569-6a71-1a1f-10d439b8b512" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entityCount",
              "name" : null,
              "entityAliasId" : "150553f6-5f7e-3621-9b6a-21e617e7e682",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "count",
                "type" : "count",
                "label" : "count",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.9944493667322047,
                "aggregationType" : null,
                "units" : null,
                "decimals" : 0,
                "funcBody" : null,
                "usePostProcessing" : true,
                "postFuncBody" : "return parseInt(value);"
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1695983110560,
                  "endTimeMs" : 1696069510560
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : true,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "5px",
            "settings" : {
              "cardHtml" : "<div class='card'>\n    <!--<h5>Assets Monitored</h5>-->\n            \n            <div class='content' id='assets'>${#0:0}</div>\n            \n            </div>",
              "cardCss" : ".card {\n   width: 100%;\n   /*cursor: pointer;*/\n   height: 100%;\n   border: 0px solid #ccc;\n   padding: 10px;\n   box-sizing: border-box;\n   /*display: flex;*/\n   flex-direction: row;\n   text-align: center;\n   font-size: 1.3vw;\n}\n\n.content {\n    \n    font-weight:600;\n   padding: 1px;\n   display: flex;\n   align-items: center;\n   justify-content: center;\n   height: 100%;\n   padding-bottom: 15px;\n   box-sizing: border-box;\n   color: #666;\n}\n\n.content {\n   color: #0056b3 !important;\n    font-weight: 500 !important;\n    font-size: 1.8vw;\n}\n\n\n.content span {\n    display: block;\n    font-weight: 400;\n}\n\n.h1 {\n    \n    color: #999;\n    font-size: 14px;\n    font-weight: bold;\n    margin: 0;\n    padding-bottom: 5px;\n    line-height: 22px;\n    align-items: center;\n    justify-content: center;\n}\n\nh5 {\n    font-size: 1vw;\n    font-weight: 400;\n    line-height: 1;\n    letter-spacing: 0;\n    margin: 5px 0 0 0;\n}\n\n"
            },
            "title" : "Assets",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : {
              "elementClick" : [ ],
              "headerButton" : [ {
                "name" : "Assets",
                "icon" : "arrow_right",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "root_asset_list",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openRightLayout" : false,
                "dialogTitle" : "",
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : 80,
                "dialogHeight" : 90,
                "openInSeparateDialog" : true,
                "openInPopover" : false,
                "id" : "1a8388ce-1e4b-98be-da4f-861a829e7b84"
              } ]
            },
            "enableDataExport" : false,
            "widgetCss" : ".tb-widget-actions.tb-widget-actions-absolute.ng-star-inserted {\r\n    position: absolute !important;\r\n    top: -11px !important;\r\n    right: -6px !important;\r\n    z-index: 150 !important;\r\n}",
            "pageSize" : 1024,
            "decimals" : 0,
            "noDataDisplayMessage" : "",
            "borderRadius" : "15px",
            "displayTimewindow" : true,
            "titleFont" : {
              "size" : 1,
              "sizeUnit" : "vw",
              "family" : "Roboto",
              "weight" : "bolder",
              "style" : "normal"
            },
            "showTitleIcon" : false,
            "titleTooltip" : "",
            "titleIcon" : "domain",
            "iconColor" : "#0056B3",
            "iconSize" : "1.5vw"
          },
          "row" : 0,
          "col" : 0,
          "id" : "00673039-8569-6a71-1a1f-10d439b8b512",
          "typeFullFqn" : "system.cards.html_value_card"
        },
        "3d03f1ef-d5e5-e2f5-9568-47487ece1b63" : {
          "typeFullFqn" : "system.scheduling.scheduler_events",
          "type" : "static",
          "sizeX" : 7.5,
          "sizeY" : 4.5,
          "config" : {
            "timewindow" : {
              "realtime" : {
                "interval" : 1000,
                "timewindowMs" : 86400000
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "name",
              "displayCreatedTime" : false,
              "displayCustomer" : true,
              "title" : "Scheduler events",
              "displayType" : true,
              "enabledViews" : "both",
              "customEventTypes" : [ ]
            },
            "title" : "Scheduler events",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "static",
              "name" : "Simulated",
              "dataKeys" : [ {
                "name" : "f(x)",
                "type" : "function",
                "label" : "Sin",
                "color" : "#2196f3",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.472295003170325,
                "funcBody" : "return Math.round(1000*Math.sin(time/5000));"
              }, {
                "name" : "f(x)",
                "type" : "function",
                "label" : "Cos",
                "color" : "#4caf50",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.8926244886945558,
                "funcBody" : "return Math.round(1000*Math.cos(time/5000));"
              }, {
                "name" : "f(x)",
                "type" : "function",
                "label" : "Random",
                "color" : "#f44336",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.6401141393938932,
                "funcBody" : "var value = prevValue + Math.random() * 100 - 50;\nvar multiplier = Math.pow(10, 2 || 0);\nvar value = Math.round(value * multiplier) / multiplier;\nif (value < -1000) {\n\tvalue = -1000;\n} else if (value > 1000) {\n\tvalue = 1000;\n}\nreturn value;"
              } ]
            } ],
            "enableDataExport" : true,
            "widgetStyle" : { },
            "actions" : { }
          },
          "row" : 0,
          "col" : 0,
          "id" : "3d03f1ef-d5e5-e2f5-9568-47487ece1b63"
        },
        "8dddbe58-5796-8170-71fe-ad6d2dd2e6d6" : {
          "typeFullFqn" : "system.files.files",
          "type" : "static",
          "sizeX" : 7.5,
          "sizeY" : 4.5,
          "config" : {
            "timewindow" : {
              "realtime" : {
                "interval" : 1000,
                "timewindowMs" : 86400000
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "displayCreatedTime" : true,
              "displayCustomer" : true,
              "title" : "Files",
              "displayType" : true
            },
            "title" : "Files",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "static",
              "name" : "Simulated",
              "dataKeys" : [ {
                "name" : "f(x)",
                "type" : "function",
                "label" : "Sin",
                "color" : "#2196f3",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.472295003170325,
                "funcBody" : "return Math.round(1000*Math.sin(time/5000));"
              }, {
                "name" : "f(x)",
                "type" : "function",
                "label" : "Cos",
                "color" : "#4caf50",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.8926244886945558,
                "funcBody" : "return Math.round(1000*Math.cos(time/5000));"
              }, {
                "name" : "f(x)",
                "type" : "function",
                "label" : "Random",
                "color" : "#f44336",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.6401141393938932,
                "funcBody" : "var value = prevValue + Math.random() * 100 - 50;\nvar multiplier = Math.pow(10, 2 || 0);\nvar value = Math.round(value * multiplier) / multiplier;\nif (value < -1000) {\n\tvalue = -1000;\n} else if (value > 1000) {\n\tvalue = 1000;\n}\nreturn value;"
              } ]
            } ],
            "enableDataExport" : true,
            "widgetStyle" : { },
            "actions" : { }
          },
          "row" : 0,
          "col" : 0,
          "id" : "8dddbe58-5796-8170-71fe-ad6d2dd2e6d6"
        },
        "4b9dc2b2-5ab4-3c9e-556a-7163d0884cc3" : {
          "typeFullFqn" : "system.label_card",
          "type" : "static",
          "sizeX" : 4.5,
          "sizeY" : 1,
          "config" : {
            "showTitle" : false,
            "backgroundColor" : "rgba(0, 0, 0, 0)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "autoScale" : true,
              "label" : "test outline appearance to the country input",
              "labelFont" : {
                "family" : "Roboto",
                "size" : 20,
                "sizeUnit" : "px",
                "style" : "normal",
                "weight" : "400",
                "lineHeight" : "24px"
              },
              "labelColor" : "rgba(0, 0, 0, 0.87)",
              "showIcon" : false,
              "iconSize" : 24,
              "iconSizeUnit" : "px",
              "icon" : "thermostat",
              "iconColor" : "var(--tb-primary-500)",
              "background" : {
                "type" : "color",
                "color" : "#fff",
                "overlay" : {
                  "enabled" : false,
                  "color" : "rgba(255,255,255,0.72)",
                  "blur" : 3
                }
              },
              "padding" : "12px"
            },
            "title" : "Label card",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "widgetStyle" : { },
            "actions" : {
              "headerButton" : [ {
                "name" : "Widget header button",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<tb-country-autocomplete appearance=\"outline\"></tb-country-autocomplete>",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "/*=======================================================================*/\n/*=====  There are three examples: for delete, edit and add entity  =====*/\n/*=======================================================================*/\n/*=======================  Delete entity example  =======================*/\n/*=======================================================================*/\n//\n// let $injector = widgetContext.$scope.$injector;\n// let dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\n// let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n// let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n\n// openDeleteEntityDialog();\n\n// function openDeleteEntityDialog() {\n//     let title = 'Delete ' + entityId.entityType.toLowerCase() + ' ' +\n//                 entityName;\n//     let content = 'Are you sure you want to delete the ' +\n//                  entityId.entityType.toLowerCase() + ' ' + entityName + '?';\n//     dialogs.confirm(title, content, 'Cancel', 'Delete').subscribe(\n//         function(result) {\n//             if (result) {\n//                 deleteEntity();\n//             }\n//         }\n//     );\n// }\n//\n//function deleteEntity() {\n//    deleteEntityObservable(entityId).subscribe(\n//        function success() {\n//            widgetContext.updateAliases();\n//        },\n//        function fail() {\n//            showErrorDialog();\n//        }\n//    );\n//}\n//\n//function deleteEntityObservable(entityId) {\n//    if (entityId.entityType == \"ASSET\") {\n//        return assetService.deleteAsset(entityId.id);\n//    } else if (entityId.entityType == \"DEVICE\") {\n//        return deviceService.deleteDevice(entityId.id);\n//    }\n//}\n//\n//function showErrorDialog() {\n//    let title = 'Error';\n//    let content = 'An error occurred while deleting the entity. Please try again.';\n//    dialogs.alert(title, content, 'CLOSE').subscribe(\n//        function(result) {}\n//    );\n//}\n//\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n//\nlet $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\n//let entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\n//let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n//let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n//let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n//let entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n//\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\nfunction EditEntityDialogController(instance) {}\n//function EditEntityDialogController(instance) {\n//    let vm = instance;\n//\n//    vm.entityName = entityName;\n//    vm.entityType = entityId.entityType;\n//    vm.entitySearchDirection = {\n//        from: \"FROM\",\n//        to: \"TO\"\n//    };\n//    vm.attributes = {};\n//    vm.oldRelationsData = [];\n//    vm.relationsToDelete = [];\n//    vm.entity = {};\n//\n//    vm.editEntityFormGroup = vm.fb.group({\n//        entityName: ['', [vm.validators.required]],\n//        entityType: [null],\n//        entityLabel: [null],\n//        type: ['', [vm.validators.required]],\n//        attributes: vm.fb.group({\n//            latitude: [null],\n//            longitude: [null],\n//            address: [null],\n//            owner: [null],\n//            number: [null, [vm.validators.pattern(/^-?[0-9]+$/)]],\n//            booleanValue: [false]\n//        }),\n//        oldRelations: vm.fb.array([]),\n//        relations: vm.fb.array([])\n//    });\n//\n//    getEntityInfo();\n//\n//    vm.cancel = function() {\n//        vm.dialogRef.close(null);\n//    };\n//\n//    vm.relations = function() {\n//        return vm.editEntityFormGroup.get('relations');\n//    };\n//\n//    vm.oldRelations = function() {\n//        return vm.editEntityFormGroup.get('oldRelations');\n//    };\n//\n//    vm.addRelation = function() {\n//        vm.relations().push(vm.fb.group({\n//            relatedEntity: [null, [vm.validators.required]],\n//            relationType: [null, [vm.validators.required]],\n//            direction: [null, [vm.validators.required]]\n//        }));\n//    };\n//\n//    function addOldRelation() {\n//        vm.oldRelations().push(vm.fb.group({\n//            relatedEntity: [{value: null, disabled: true}, [vm.validators.required]],\n//            relationType: [{value: null, disabled: true}, [vm.validators.required]],\n//            direction: [{value: null, disabled: true}, [vm.validators.required]]\n//        }));\n//    }\n//\n//    vm.removeRelation = function(index) {\n//        vm.relations().removeAt(index);\n//        vm.relations().markAsDirty();\n//    };\n//\n//    vm.removeOldRelation = function(index, relation) {\n//        vm.oldRelations().removeAt(index);\n//        vm.relationsToDelete.push(relation);\n//        vm.oldRelations().markAsDirty();\n//    };\n//\n//    vm.save = function() {\n//        vm.editEntityFormGroup.markAsPristine();\n//        widgetContext.rxjs.forkJoin([\n//            saveAttributes(entityId),\n//            saveRelations(entityId),\n//            saveEntity()\n//        ]).subscribe(\n//            function () {\n//                widgetContext.updateAliases();\n//                vm.dialogRef.close(null);\n//            }\n//        );\n//    };\n//\n//    function getEntityAttributes(attributes) {\n//        for (var i = 0; i < attributes.length; i++) {\n//            vm.attributes[attributes[i].key] = attributes[i].value;\n//        }\n//    }\n//\n//    function getEntityRelations(relations) {\n//        let relationsFrom = relations[0];\n//        let relationsTo = relations[1];\n//        for (let i=0; i < relationsFrom.length; i++) {\n//            let relation = {\n//                direction: 'FROM',\n//                relationType: relationsFrom[i].type,\n//                relatedEntity: relationsFrom[i].to\n//            };\n//            vm.oldRelationsData.push(relation);\n//            addOldRelation();\n//        }\n//        for (let i=0; i < relationsTo.length; i++) {\n//            let relation = {\n//                direction: 'TO',\n//                relationType: relationsTo[i].type,\n//                relatedEntity: relationsTo[i].from\n//            };\n//            vm.oldRelationsData.push(relation);\n//            addOldRelation();\n//        }\n//    }\n//\n//    function getEntityInfo() {\n//         widgetContext.rxjs.forkJoin([\n//             entityRelationService.findInfoByFrom(entityId),\n//             entityRelationService.findInfoByTo(entityId),\n//             attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE'),\n//             entityService.getEntity(entityId.entityType, entityId.id)\n//         ]).subscribe(\n//             function (data) {\n//                 getEntityRelations(data.slice(0,2));\n//                 getEntityAttributes(data[2]);\n//                 vm.entity = data[3];\n//                 vm.editEntityFormGroup.patchValue({\n//                     entityName: vm.entity.name,\n//                     entityType: vm.entityType,\n//                     entityLabel: vm.entity.label,\n//                     type: vm.entity.type,\n//                     attributes: vm.attributes,\n//                     oldRelations: vm.oldRelationsData\n//                 }, {emitEvent: false});\n//             }\n//         );\n//     }\n//\n//    function saveEntity() {\n//        const formValues = vm.editEntityFormGroup.value;\n//        if (vm.entity.label !== formValues.entityLabel){\n//            vm.entity.label = formValues.entityLabel;\n//            if (formValues.entityType == 'ASSET') {\n//                return assetService.saveAsset(vm.entity);\n//            } else if (formValues.entityType == 'DEVICE') {\n//                return deviceService.saveDevice(vm.entity);\n//            }\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//\n//    function saveAttributes(entityId) {\n//        let attributes = vm.editEntityFormGroup.get('attributes').value;\n//        let attributesArray = [];\n//        for (let key in attributes) {\n//            if (attributes[key] !== vm.attributes[key]) {\n//                attributesArray.push({key: key, value: attributes[key]});\n//            }\n//        }\n//        if (attributesArray.length > 0) {\n//            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//\n//    function saveRelations(entityId) {\n//        let relations = vm.editEntityFormGroup.get('relations').value;\n//        let tasks = [];\n//        for(let i=0; i < relations.length; i++) {\n//            let relation = {\n//                type: relations[i].relationType,\n//                typeGroup: 'COMMON'\n//            };\n//            if (relations[i].direction == 'FROM') {\n//                relation.to = relations[i].relatedEntity;\n//                relation.from = entityId;\n//            } else {\n//                relation.to = entityId;\n//                relation.from = relations[i].relatedEntity;\n//            }\n//            tasks.push(entityRelationService.saveRelation(relation));\n//        }\n//        for (let i=0; i < vm.relationsToDelete.length; i++) {\n//            let relation = {\n//                type: vm.relationsToDelete[i].relationType\n//            };\n//            if (vm.relationsToDelete[i].direction == 'FROM') {\n//                relation.to = vm.relationsToDelete[i].relatedEntity;\n//                relation.from = entityId;\n//            } else {\n//                relation.to = entityId;\n//                relation.from = vm.relationsToDelete[i].relatedEntity;\n//            }\n//            tasks.push(entityRelationService.deleteRelation(relation.from, relation.type, relation.to));\n//        }\n//        if (tasks.length > 0) {\n//            return widgetContext.rxjs.forkJoin(tasks);\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//}\n//\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n//\n//let $injector = widgetContext.$scope.$injector;\n//let customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\n//let assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\n//let deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n//let attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n//let entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\n//\n//openAddEntityDialog();\n//\n//function openAddEntityDialog() {\n//    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\n//}\n//\n//function AddEntityDialogController(instance) {\n//    let vm = instance;\n//\n//    vm.allowedEntityTypes = ['ASSET', 'DEVICE'];\n//    vm.entitySearchDirection = {\n//        from: \"FROM\",\n//        to: \"TO\"\n//    }\n//\n//    vm.addEntityFormGroup = vm.fb.group({\n//      entityName: ['', [vm.validators.required]],\n//      entityType: ['DEVICE'],\n//      entityLabel: [null],\n//      type: ['', [vm.validators.required]],\n//      attributes: vm.fb.group({\n//          latitude: [null],\n//          longitude: [null],\n//          address: [null],\n//          owner: [null],\n//          number: [null, [vm.validators.pattern(/^-?[0-9]+$/)]],\n//          booleanValue: [null]\n//      }),\n//      relations: vm.fb.array([])\n//    });\n//\n//    vm.cancel = function() {\n//        vm.dialogRef.close(null);\n//    };\n//\n//    vm.relations = function() {\n//        return vm.addEntityFormGroup.get('relations');\n//    };\n//\n//    vm.addRelation = function() {\n//        vm.relations().push(vm.fb.group({\n//          relatedEntity: [null, [vm.validators.required]],\n//          relationType: [null, [vm.validators.required]],\n//          direction: [null, [vm.validators.required]]\n//        }));\n//    };\n//\n//    vm.removeRelation = function(index) {\n//        vm.relations().removeAt(index);\n//        vm.relations().markAsDirty();\n//    };\n//\n//    vm.save = function() {\n//        vm.addEntityFormGroup.markAsPristine();\n//        saveEntityObservable().subscribe(\n//            function (entity) {\n//                widgetContext.rxjs.forkJoin([\n//                    saveAttributes(entity.id),\n//                    saveRelations(entity.id)\n//                ]).subscribe(\n//                    function () {\n//                        widgetContext.updateAliases();\n//                        vm.dialogRef.close(null);\n//                    }\n//                );\n//            }\n//        );\n//    };\n//\n//    function saveEntityObservable() {\n//        const formValues = vm.addEntityFormGroup.value;\n//        let entity = {\n//            name: formValues.entityName,\n//            type: formValues.type,\n//            label: formValues.entityLabel\n//        };\n//        if (formValues.entityType == 'ASSET') {\n//            return assetService.saveAsset(entity);\n//        } else if (formValues.entityType == 'DEVICE') {\n//            return deviceService.saveDevice(entity);\n//        }\n//    }\n//\n//    function saveAttributes(entityId) {\n//        let attributes = vm.addEntityFormGroup.get('attributes').value;\n//        let attributesArray = [];\n//        for (let key in attributes) {\n//            if(attributes[key] !== null) {\n//                attributesArray.push({key: key, value: attributes[key]});\n//            }\n//        }\n//        if (attributesArray.length > 0) {\n//            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//\n//    function saveRelations(entityId) {\n//        let relations = vm.addEntityFormGroup.get('relations').value;\n//        let tasks = [];\n//        for(let i=0; i < relations.length; i++) {\n//            let relation = {\n//                type: relations[i].relationType,\n//                typeGroup: 'COMMON'\n//            };\n//            if (relations[i].direction == 'FROM') {\n//                relation.to = relations[i].relatedEntity;\n//                relation.from = entityId;\n//            } else {\n//                relation.to = entityId;\n//                relation.from = relations[i].relatedEntity;\n//            }\n//            tasks.push(entityRelationService.saveRelation(relation));\n//        }\n//        if (tasks.length > 0) {\n//            return widgetContext.rxjs.forkJoin(tasks);\n//        }\n//        return widgetContext.rxjs.of([]);\n//    }\n//}\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "92a1b117-7312-4ae5-ecbf-e395f45b33cd"
              } ]
            },
            "configMode" : "advanced",
            "margin" : "0px",
            "borderRadius" : "0px",
            "widgetCss" : "",
            "noDataDisplayMessage" : "",
            "showTitleIcon" : false,
            "titleTooltip" : "",
            "titleFont" : {
              "size" : 12,
              "sizeUnit" : "px",
              "family" : null,
              "weight" : null,
              "style" : null,
              "lineHeight" : "1.6"
            },
            "titleIcon" : "",
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "14px",
            "datasources" : [ ]
          },
          "row" : 0,
          "col" : 0,
          "id" : "4b9dc2b2-5ab4-3c9e-556a-7163d0884cc3"
        },
        "b9833845-817b-f249-a1b9-111f634d6bed" : {
          "typeFullFqn" : "system.action_button",
          "type" : "latest",
          "sizeX" : 3,
          "sizeY" : 1,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1737978113139,
                  "endTimeMs" : 1738064513139
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#FFFFFF01",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "activatedState" : {
                "action" : "GET_DASHBOARD_STATE",
                "defaultValue" : false,
                "executeRpc" : {
                  "method" : null,
                  "requestTimeout" : null,
                  "requestPersistent" : null,
                  "persistentPollingInterval" : null
                },
                "getAttribute" : {
                  "scope" : null,
                  "key" : "state"
                },
                "getTimeSeries" : {
                  "key" : "state"
                },
                "getAlarmStatus" : {
                  "severityList" : null,
                  "typeList" : null
                },
                "dataToValue" : {
                  "type" : "FUNCTION",
                  "dataToValueFunction" : "/* Should return boolean value */\nconsole.warn(`action button ${data}`);\nreturn data;",
                  "compareToValue" : "default"
                }
              },
              "disabledState" : {
                "action" : "DO_NOTHING",
                "defaultValue" : false,
                "getAttribute" : {
                  "key" : "state",
                  "scope" : null
                },
                "getTimeSeries" : {
                  "key" : "state"
                },
                "getAlarmStatus" : {
                  "severityList" : null,
                  "typeList" : null
                },
                "dataToValue" : {
                  "type" : "NONE",
                  "compareToValue" : true,
                  "dataToValueFunction" : "/* Should return boolean value */\nreturn data;"
                }
              },
              "appearance" : {
                "type" : "outlined",
                "autoScale" : true,
                "showLabel" : true,
                "label" : "Button",
                "showIcon" : true,
                "icon" : "home",
                "iconSize" : 24,
                "iconSizeUnit" : "px",
                "mainColor" : "var(--tb-primary-500)",
                "backgroundColor" : "#FFFFFF",
                "customStyle" : {
                  "enabled" : null,
                  "hovered" : null,
                  "pressed" : null,
                  "activated" : null,
                  "disabled" : null
                }
              }
            },
            "title" : "Action button",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "enableDataExport" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "borderRadius" : "4px",
            "configMode" : "basic",
            "actions" : {
              "click" : [ {
                "id" : "9463e8a9-5805-c268-e88a-df6ed615c890",
                "name" : "onClick",
                "icon" : "more_horiz",
                "type" : "updateDashboardState",
                "targetDashboardStateId" : null,
                "openRightLayout" : false,
                "setEntityId" : true,
                "stateEntityParamName" : null
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "b9833845-817b-f249-a1b9-111f634d6bed"
        }
      },
      "states" : {
        "root_asset_list" : {
          "name" : "Root Asset List",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "44cf0a39-52d3-8c4a-e068-2071f857a17c" : {
                  "sizeX" : 24,
                  "sizeY" : 5,
                  "row" : 0,
                  "col" : 0
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : true,
                "backgroundImageUrl" : null,
                "mobileAutoFillHeight" : false,
                "mobileRowHeight" : 70,
                "layoutType" : "default"
              }
            }
          }
        },
        "default123" : {
          "name" : "Widget Action",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "459e719f-01f8-415d-8b40-599990ccd846" : {
                  "sizeX" : 6,
                  "sizeY" : 2,
                  "row" : 0,
                  "col" : 0
                },
                "8b9a22c4-3c6b-a667-6378-3d7d66f0d8ad" : {
                  "sizeX" : 6,
                  "sizeY" : 2,
                  "row" : 0,
                  "col" : 6
                },
                "00673039-8569-6a71-1a1f-10d439b8b512" : {
                  "sizeX" : 6,
                  "sizeY" : 2,
                  "row" : 0,
                  "col" : 12
                },
                "3d03f1ef-d5e5-e2f5-9568-47487ece1b63" : {
                  "sizeX" : 18,
                  "sizeY" : 7,
                  "row" : 5,
                  "col" : 0
                },
                "8dddbe58-5796-8170-71fe-ad6d2dd2e6d6" : {
                  "sizeX" : 8,
                  "sizeY" : 7,
                  "row" : 5,
                  "col" : 18
                },
                "4b9dc2b2-5ab4-3c9e-556a-7163d0884cc3" : {
                  "sizeX" : 13,
                  "sizeY" : 3,
                  "row" : 2,
                  "col" : 0
                },
                "b9833845-817b-f249-a1b9-111f634d6bed" : {
                  "sizeX" : 3,
                  "sizeY" : 1,
                  "row" : 3,
                  "col" : 15
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "columns" : 24,
                "margin" : 10,
                "outerMargin" : true,
                "backgroundSizeMode" : "100%",
                "layoutType" : "default"
              }
            }
          }
        }
      },
      "entityAliases" : {
        "150553f6-5f7e-3621-9b6a-21e617e7e682" : {
          "id" : "150553f6-5f7e-3621-9b6a-21e617e7e682",
          "alias" : "Assets",
          "filter" : {
            "type" : "entityType",
            "resolveMultiple" : true,
            "entityType" : "ASSET"
          }
        }
      },
      "filters" : {
        "2b2e0bc5-1244-03ba-cd06-d20aa98cbc4f" : {
          "id" : "2b2e0bc5-1244-03ba-cd06-d20aa98cbc4f",
          "filter" : "PumpType",
          "keyFilters" : [ {
            "key" : {
              "type" : "ENTITY_FIELD",
              "key" : "type"
            },
            "valueType" : "STRING",
            "predicates" : [ {
              "keyFilterPredicate" : {
                "operation" : "EQUAL",
                "value" : {
                  "defaultValue" : "Pump",
                  "dynamicValue" : null
                },
                "ignoreCase" : true,
                "type" : "STRING"
              },
              "userInfo" : {
                "editable" : true,
                "label" : "",
                "autogeneratedLabel" : true,
                "order" : 0
              }
            } ]
          } ],
          "editable" : true
        }
      },
      "timewindow" : {
        "displayValue" : "",
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "quickInterval" : "CURRENT_DAY"
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1734323436787,
            "endTimeMs" : 1734409836787
          },
          "quickInterval" : "CURRENT_DAY"
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : true,
        "showEntitiesSelect" : true,
        "showDashboardTimewindow" : true,
        "showDashboardExport" : true,
        "toolbarAlwaysOpen" : true
      }
    },
    "name" : "Widget Action",
    "resources" : null,
    "assignedCustomers" : null,
    "customerId" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "0a7d0e80-bc78-11ef-af79-39efd3f3753a"
    },
    "ownerId" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}